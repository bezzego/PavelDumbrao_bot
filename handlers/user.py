import sqlite3
import random
import string
from aiogram.enums import ParseMode
from aiogram import Router, types
from aiogram.types import InlineKeyboardButton
from aiogram.filters import Command
from aiogram.types import FSInputFile
import asyncio
import datetime
import calendar
import db.db as db
import config
from config import CLOSED_CHAT_URL
from keyboards import user_menu, admin_menu
from utils.misc import check_subscription
from handlers import lessons, referral, premium

# Import payment utils
from utils.yoomoney import generate_payment_label, create_payment_url

# --- Promo context for tariff promo codes ---
promo_context = {}  # user_id -> tariff_key

router = Router()


@router.message(lambda m: m.text and m.text.upper().startswith("GPT"))
async def handle_promo_code(message: types.Message):
    user_id = message.from_user.id
    user_data = db.get_user(user_id)
    code = message.text.upper()
    discounted_amount = None
    discount_percent = None
    label = None
    button_text = None
    # --- Determine tariff_key from promo_context, fallback to default ---
    global TARIFFS
    tariff_key = promo_context.get(user_id, "tariff_1")
    base_amount = TARIFFS.get(tariff_key, 2490)

    # First, check for a TOP2/TOP3 promo code in the DB
    promo_record = db.get_promo(code)
    if promo_record:
        if promo_record["used"]:
            await message.answer("–≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
            promo_context.pop(user_id, None)
            return
        if promo_record["user_id"] != user_id:
            await message.answer("–≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
            promo_context.pop(user_id, None)
            return
        # Determine discount percent based on promo type
        if promo_record["type"] in ("TOP2", "TOP3"):
            db.set_premium(user_id, 2 if promo_record["type"] == "TOP2" else 3)
            discount_percent = 30
        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞.")
            promo_context.pop(user_id, None)
            return
        discounted_amount = int(base_amount * (100 - discount_percent) / 100)
        button_text = f"–û–ø–ª–∞—Ç–∏—Ç—å —Å–æ —Å–∫–∏–¥–∫–æ–π {discounted_amount} ‚ÇΩ"
        label = generate_payment_label(user_id)
        db.add_payment(label, user_id, discounted_amount)
        url = await create_payment_url(discounted_amount, label)
        kb = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text=button_text,
                        url=url,
                    )
                ]
            ]
        )
        await message.answer(
            f"–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω—ë–Ω! –í–∞—à–∞ —Å–∫–∏–¥–∫–∞ {discount_percent}% –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.\n\n"
            f"–î–ª—è –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø–∞ –ø–æ —Å–Ω–∏–∂–µ–Ω–Ω–æ–π —Ü–µ–Ω–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=kb,
        )
        db.mark_promo_used(code)
        promo_context.pop(user_id, None)
        return
    # Fallback to GPTDISCOUNT 10% code
    if code == "GPTDISCOUNT":
        db.set_premium(user_id, 2)
        discounted_amount = int(base_amount * 0.9)
        discount_percent = 10
        button_text = f"–û–ø–ª–∞—Ç–∏—Ç—å —Å–æ —Å–∫–∏–¥–∫–æ–π {discounted_amount} ‚ÇΩ"
        label = generate_payment_label(user_id)
        db.add_payment(label, user_id, discounted_amount)
        url = await create_payment_url(discounted_amount, label)
        kb = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text=button_text,
                        url=url,
                    )
                ]
            ]
        )
        await message.answer(
            f"–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω—ë–Ω! –í–∞—à–∞ —Å–∫–∏–¥–∫–∞ {discount_percent}% –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.\n\n"
            f"–î–ª—è –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø–∞ –ø–æ —Å–Ω–∏–∂–µ–Ω–Ω–æ–π —Ü–µ–Ω–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=kb,
        )
        promo_context.pop(user_id, None)
        return
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥.")
        promo_context.pop(user_id, None)
        return


@router.message(lambda m: m.photo)
async def handle_screenshot(message: types.Message):
    """Handle user sending a screenshot of story."""
    user = message.from_user
    user_id = user.id
    # Forward (actually copy) the photo to the review group with inline buttons
    caption = f"–û—Ç "
    if user.username:
        caption += f"@{user.username}"
    else:
        caption += f"<a href=\"tg://user?id={user_id}\">{user.first_name or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}</a>"
    caption += ": —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç–æ—Ä–∏—Å"
    markup = admin_menu.story_review_keyboard(user_id)
    # Use HTML parse mode for mention link
    try:
        await message.copy_to(
            config.GROUP_ID, caption=caption, reply_markup=markup, parse_mode="HTML"
        )
    except Exception as e:
        # If sending to group fails, notify user
        await message.answer(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return
    # Confirm to user
    await message.answer("üì∑ –í–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É.")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=user_menu.main_menu)


@router.message(Command("start"))
async def cmd_start(message: types.Message):
    user = message.from_user
    user_id = user.id
    # Parse referral parameter if any (after /start)
    args = message.text.split()
    referral_id = None
    if len(args) > 1:
        referral_arg = args[1]
        if referral_arg.isdigit():
            ref_id_int = int(referral_arg)
            if ref_id_int != user_id:
                referral_id = ref_id_int

    # Add user to DB (if not already)
    new_user = db.add_user(
        user_id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name,
        invited_by=referral_id,
    )

    # Send welcome photo and intro text
    try:
        await message.answer_photo(
            photo=FSInputFile("images/welcome_photo.jpg"),
            caption=(
                "–ü—Ä–∏–≤–µ—Ç, —è –ü–∞–≤–µ–ª –î—É–º–±—Ä–∞–æ.\n\n"
                "–Ø –¥–µ–ª–∞—é –∏–∑ –∏–¥–µ–π ‚Äî –ø—Ä–æ–¥—É–∫—Ç—ã, –∏–∑ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ ‚Äî –¥–µ–Ω—å–≥–∏.\n"
                "–ó–∞–ø—É—Å–∫–∞—é AI-—Å–µ—Ä–≤–∏—Å—ã, –≤–æ—Ä–æ–Ω–∫–∏, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏. –ë—ã—Å—Ç—Ä–æ, –¥–µ—Ä–∑–∫–æ, –ø–æ –¥–µ–ª—É.\n\n"
                "–≠—Ç–æ—Ç —á–µ–ª–ª–µ–Ω–¥–∂ ‚Äî –Ω–µ –ø—Ä–æ ¬´–ø–æ–∏–≥—Ä–∞—Ç—å—Å—è —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏¬ª.\n"
                "–≠—Ç–æ –ø—Ä–æ —Ç–æ, –∫–∞–∫ –≤—Å—Ç—Ä–æ–∏—Ç—å GPT –≤ —Å–≤–æ—é –∂–∏–∑–Ω—å –∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —ç—Ç–æ–º.\n\n"
                "–ï—Å–ª–∏ —Ç—ã –Ω–µ —Ö–æ—á–µ—à—å –±—ã—Ç—å –∑–∞–º–µ–Ω—ë–Ω, —Ç–µ–±–µ –ø–æ—Ä–∞ –Ω–∞—É—á–∏—Ç—å—Å—è —É–ø—Ä–∞–≤–ª—è—Ç—å.\n\n"
                "–ü–æ–≥–Ω–∞–ª–∏."
            ),
            parse_mode=ParseMode.MARKDOWN,
        )
    except Exception:
        # If photo sending fails, just send text
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç, —è –ü–∞–≤–µ–ª –î—É–º–±—Ä–∞–æ.\n\n"
            "–Ø –¥–µ–ª–∞—é –∏–∑ –∏–¥–µ–π ‚Äî –ø—Ä–æ–¥—É–∫—Ç—ã, –∏–∑ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ ‚Äî –¥–µ–Ω—å–≥–∏.\n"
            "–ó–∞–ø—É—Å–∫–∞—é AI-—Å–µ—Ä–≤–∏—Å—ã, –≤–æ—Ä–æ–Ω–∫–∏, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏. –ë—ã—Å—Ç—Ä–æ, –¥–µ—Ä–∑–∫–æ, –ø–æ –¥–µ–ª—É.\n\n"
            "–≠—Ç–æ—Ç —á–µ–ª–ª–µ–Ω–¥–∂ ‚Äî –Ω–µ –ø—Ä–æ ¬´–ø–æ–∏–≥—Ä–∞—Ç—å—Å—è —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏¬ª.\n"
            "–≠—Ç–æ –ø—Ä–æ —Ç–æ, –∫–∞–∫ –≤—Å—Ç—Ä–æ–∏—Ç—å GPT –≤ —Å–≤–æ—é –∂–∏–∑–Ω—å –∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —ç—Ç–æ–º.\n\n"
            "–ï—Å–ª–∏ —Ç—ã –Ω–µ —Ö–æ—á–µ—à—å –±—ã—Ç—å –∑–∞–º–µ–Ω—ë–Ω, —Ç–µ–±–µ –ø–æ—Ä–∞ –Ω–∞—É—á–∏—Ç—å—Å—è —É–ø—Ä–∞–≤–ª—è—Ç—å.\n\n"
            "–ü–æ–≥–Ω–∞–ª–∏.",
            parse_mode=ParseMode.MARKDOWN,
        )

    text = (
        "üìå *–í–∞–∂–Ω–æ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º*\n\n"
        "1. *–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª —ç–∫—Å–ø–µ—Ä—Ç–∞ ‚Äî –±–µ–∑ —ç—Ç–æ–≥–æ —Ç–µ–±—è –Ω–µ –ø—É—Å—Ç–∏—Ç –≤ —á–∞—Ç:*\n\n"
        "üëâ [–ö–∞–Ω–∞–ª –ü–∞–≤–ª–∞ –î—É–º–±—Ä–∞–æ](https://t.me/+olZLwPvR2RoyY2Uy)\n\n"
        "2. *–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞—Ö–æ–¥–∏ –≤ —á–∞—Ç —á–µ–ª–ª–µ–Ω–¥–∂–∞:*\n\n"
        "üëâ [–ß–∞—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤](https://t.me/+EO4WCUeMnV5hYjFi)\n\n"
        "_–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ë–µ–∑ –Ω–µ—ë ‚Äî –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É –Ω–µ –±—É–¥–µ—Ç._"
    )
    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub"
                )
            ]
        ]
    )
    await message.answer(text, reply_markup=kb, parse_mode=ParseMode.MARKDOWN)


@router.callback_query(lambda call: call.data.startswith("check_sub"))
async def callback_check_sub(callback: types.CallbackQuery):
    user = callback.from_user
    user_id = user.id

    # Check subscription only to channel
    subscribed = await check_subscription(callback.bot, user_id)
    if not subscribed:
        await callback.answer("‚ùóÔ∏è –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª.", show_alert=True)
        return

    # Subscription confirmed:
    # Ensure user is in DB
    new_user = db.add_user(
        user_id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name,
    )
    # Referral bonus logic (grant once per invited user)
    user_data = db.get_user(user_id)
    if user_data:
        inviter_id = user_data.get("invited_by")
        ref_given = user_data.get("ref_bonus_given", 0)
    else:
        inviter_id = None
        ref_given = 0

    if inviter_id and ref_given == 0:
        # Add 50 points to inviter and mark bonus as given
        db.update_points(inviter_id, 50)
        db.set_ref_bonus_given(user_id)
        # Calculate number of referrals
        cur = db.conn.cursor()
        cur.execute("SELECT COUNT(*) FROM users WHERE invited_by = ?", (inviter_id,))
        referral_count = cur.fetchone()[0]
        # Fetch inviter's current points and challenge progress
        inviter_data = db.get_user(inviter_id)
        inviter_points = inviter_data["points"] if inviter_data else 0
        challenge_progress = (
            inviter_data["challenge_progress"]
            if inviter_data and "challenge_progress" in inviter_data
            else 0
        )
        # Prepare invited friend's username or first name
        invited_username = callback.from_user.username
        invited_name = callback.from_user.first_name
        display_name = (
            f"@{invited_username}" if invited_username else (invited_name or "–¥—Ä—É–≥")
        )
        if referral_count == 1:
            # First invite message
            try:
                photo = FSInputFile("images/first_invite.jpg")
                caption = (
                    "üéâ –¢—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª –ø–µ—Ä–≤–æ–≥–æ –¥—Ä—É–≥–∞!\n"
                    "+50 –±–∞–ª–ª–æ–≤ –Ω–∞ —Å—á—ë—Ç.\n\n"
                    "–î–µ—Ä–∂–∏ –±–æ–Ω—É—Å: [üì• –°–∫–∞—á–∞—Ç—å PDF]\n"
                    "–û—Å—Ç–∞–ª–æ—Å—å –µ—â—ë 4 –¥–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –≤ AI-–∫–ª—É–±.\n"
                )
                await callback.bot.send_photo(
                    inviter_id,
                    photo=photo,
                    caption=caption,
                    parse_mode=ParseMode.MARKDOWN,
                )
            except Exception:
                # fallback to text
                await callback.bot.send_message(
                    inviter_id,
                    "üéâ –¢—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª –ø–µ—Ä–≤–æ–≥–æ –¥—Ä—É–≥–∞!\n"
                    "+50 –±–∞–ª–ª–æ–≤ –Ω–∞ —Å—á—ë—Ç.\n\n"
                    "–î–µ—Ä–∂–∏ –±–æ–Ω—É—Å: [üì• –°–∫–∞—á–∞—Ç—å PDF]\n"
                    "–û—Å—Ç–∞–ª–æ—Å—å –µ—â—ë 4 –¥–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –≤ AI-–∫–ª—É–±.",
                )
            # Send the PDF bonus as document
            try:
                doc = FSInputFile("gift.pdf")
                await callback.bot.send_document(
                    inviter_id, document=doc, caption="üì• –°–∫–∞—á–∞—Ç—å PDF"
                )
            except Exception:
                await callback.bot.send_message(
                    inviter_id,
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å PDF-–±–æ–Ω—É—Å. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                )
        else:
            # Subsequent invite message
            remaining = 5 - referral_count
            text = (
                f"üí• *–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ:* {display_name}\n"
                f"+50 –±–∞–ª–ª–æ–≤!\n"
                f"*–í—Å–µ–≥–æ:* {inviter_points} –±–∞–ª–ª–æ–≤\n\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å –µ—â—ë *{remaining}* –¥—Ä—É–∑–µ–π –¥–æ –∫–ª—É–±–∞ –±–µ–∑ –æ–ø–ª–∞—Ç—ã!\n\n"
                f"*–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å:*\n"
                f"üîÑ *–ü—Ä–æ–≥—Ä–µ—Å—Å:*\n\n"
                f"*–¢—ã –Ω–∞–±—Ä–∞–ª:* {inviter_points} –∏–∑ 500\n"
                f"*–ß–µ–ª–ª–µ–Ω–¥–∂:* {challenge_progress} / 250\n"
                f"*–†–µ—Ñ–µ—Ä–∞–ª—ã:* {referral_count} / 5\n\n"
                "–í—Å—ë –∏–¥—ë—Ç –ø–æ –ø–ª–∞–Ω—É ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–π!"
            )
            await callback.bot.send_message(
                inviter_id, text, parse_mode=ParseMode.MARKDOWN
            )

    # --- Referral Top N Prize Logic ---
    # Compute inviter's current rank (–∫–∞–∫ –≤ –º–∞–≥–∞–∑–∏–Ω–µ)
    cur = db.conn.cursor()
    # Get current date
    today = datetime.date.today()

    if today.day == 1:
        # Reset top statuses at start of month
        try:
            db.reset_top_statuses()  # Implement this function in your db module
        except Exception:
            pass

    # Query for getting user rankings
    cur.execute(
        """
        SELECT u.user_id, COUNT(r.user_id) AS cnt
        FROM users u
        LEFT JOIN users r ON r.invited_by = u.user_id
        GROUP BY u.user_id
        ORDER BY cnt DESC
        """
    )
    all_rows = cur.fetchall()
    inviter_rank = None
    for idx, row in enumerate(all_rows, start=1):
        row_user_id = row["user_id"] if isinstance(row, (dict, sqlite3.Row)) else row[0]
        if row_user_id == inviter_id:
            inviter_rank = idx
            break
    inviter_premium = 0
    if inviter_id:
        inviter_data = db.get_user(inviter_id)
        if inviter_data and "premium" in inviter_data:
            inviter_premium = inviter_data["premium"]

    if today.day == 30:
        if inviter_rank == 1 and inviter_premium != "top1":
            try:
                await callback.bot.send_message(
                    inviter_id,
                    "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–Ω—è–ª–∏ 1 –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ —ç—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞! –ù–∞–ø–∏—à–∏—Ç–µ –ü–∞–≤–ª—É –î—É–º–±—Ä–∞–æ (https://t.me/PavelDumbrao) –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –≤ –≥—Ä—É–ø–ø—É.",
                )
            except Exception:
                pass
            db.set_premium(inviter_id, "top1")
        elif inviter_rank == 2 and inviter_premium != "top2":
            try:
                await callback.bot.send_message(
                    inviter_id,
                    "ü•à –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–Ω—è–ª–∏ 2 –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ —ç—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞! –ù–∞–ø–∏—à–∏—Ç–µ –ü–∞–≤–ª—É –î—É–º–±—Ä–∞–æ (https://t.me/PavelDumbrao) –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 20% —Å–∫–∏–¥–∫–∏ –Ω–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å.",
                )
            except Exception:
                pass
            db.set_premium(inviter_id, "top2")
        elif inviter_rank == 3 and inviter_premium != "top3":
            try:
                await callback.bot.send_message(
                    inviter_id,
                    "ü•â –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–Ω—è–ª–∏ 3 –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ —ç—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞! –ù–∞–ø–∏—à–∏—Ç–µ –ü–∞–≤–ª—É –î—É–º–±—Ä–∞–æ (https://t.me/PavelDumbrao) –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 10% —Å–∫–∏–¥–∫–∏ –Ω–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å.",
                )
            except Exception:
                pass
            db.set_premium(inviter_id, "top3")

    # Send second greeting with photo and inline "–°—Ç–∞—Ä—Ç" button
    photo = FSInputFile("images/second_photo.jpg")
    caption = (
        "–¢—ã –≤ GPT‚Äë—á–µ–ª–ª–µ–Ω–¥–∂–µ, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —Ä–µ–∞–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–≤–æ—é –∂–∏–∑–Ω—å –∑–∞ 7 –¥–Ω–µ–π.\n\n"
        "üß† –§–æ—Ä–º–∞—Ç:\n"
        "‚Äì 15 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å\n"
        "‚Äì –í–∏–¥–µ–æ + –∑–∞–¥–∞–Ω–∏–µ\n"
        "‚Äì –ë–∞–ª–ª—ã, –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –ø—Ä–∏–∑—ã\n\n"
        "–ù–∞–∂–º–∏ *–°—Ç–∞—Ä—Ç*, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å üëá"
    )
    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="–°—Ç–∞—Ä—Ç", callback_data="start_challenge")]
        ]
    )
    await callback.message.answer_photo(
        photo=photo, caption=caption, reply_markup=kb, parse_mode=ParseMode.MARKDOWN
    )

    await callback.answer()  # acknowledge callback


@router.callback_query(lambda call: call.data == "get_ref_link")
async def callback_get_ref_link(callback: types.CallbackQuery):
    user = callback.from_user
    user_id = user.id
    bot_username = (await callback.bot.get_me()).username
    ref_link = f"https://t.me/{bot_username}?start={user_id}"
    text = f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{ref_link}"
    await callback.message.answer(text)
    await callback.answer()  # acknowledge callback


# Handler for "–°—Ç–∞—Ä—Ç" button callback
@router.callback_query(lambda call: call.data == "start_challenge")
async def callback_start_challenge(callback: types.CallbackQuery):
    # Send referral system message
    text = (
        "üöÄ *–ú–∞–∫—Å–∏–º–∏–∑–∏—Ä—É–π —Å–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π!* üöÄ\n\n"
        "–ó–∞—Ä–∞–±–æ—Ç–∞–π *50 –±–∞–ª–ª–æ–≤ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞*, –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–∏–≥–ª–∞—Å–∏—à—å –≤ —á–µ–ª–ª–µ–Ω–¥–∂!\n\n"
        "üìà *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?*\n\n"
        "1. –ü—Ä–∏–≥–ª–∞—à–∞–µ—à—å –¥—Ä—É–≥–∞ ‚Äî –ø–æ–ª—É—á–∞–µ—à—å *50 –±–∞–ª–ª–æ–≤* –Ω–∞ —Å—á—ë—Ç.\n"
        "2. –¢–≤–æ–∏ –¥—Ä—É–∑—å—è ‚Äî —Ç–≤–æ–∏ –±–æ–Ω—É—Å—ã. –ß–µ–º –±–æ–ª—å—à–µ –ª—é–¥–µ–π –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ, —Ç–µ–º –±–æ–ª—å—à–µ –±–∞–ª–ª–æ–≤ —Ç—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—à—å!\n"
        "3. –°–æ–±—Ä–∞–ª *500 –±–∞–ª–ª–æ–≤* ‚Äî *–ø–æ–ª—É—á–∞–µ—à—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø* –≤ –º–æ–π –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª —Å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º–∏ —Ñ–∏—à–∫–∞–º–∏ –∏ –∏–Ω—Å–∞–π–¥–∞–º–∏!\n\n"
        "üí• *–ò—Å–ø–æ–ª—å–∑—É–π —Ä–µ—Ñ–µ—Ä–∞–ª–∫—É* –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤. –≠—Ç–æ —Ç–≤–æ–π —à–∞–Ω—Å –ø–æ–ø–∞—Å—Ç—å —Ç—É–¥–∞, –≥–¥–µ —Ç—ã –ø–æ–ª—É—á–∏—à—å —Ä–µ–∞–ª—å–Ω–æ —Ä–∞–±–æ—á–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ —Å–µ–∫—Ä–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —è –ø—Ä–∏–º–µ–Ω—è—é –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ!\n\n"
        "üîë –ù–µ —É–ø—É—Å—Ç–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–∫–∞—á–∞—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –±—ã—Å—Ç—Ä–µ–µ, –∞ –∑–∞–æ–¥–Ω–æ –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–∞–º—ã–º –∫—Ä—É—Ç—ã–º —Ñ–∏—à–∫–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤ –±–∏–∑–Ω–µ—Å–µ –∏ –∂–∏–∑–Ω–∏!"
    )
    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="–ü–û–õ–£–ß–ò–¢–¨ –†–ï–§–ï–†–ê–õ–¨–ù–£–Æ –°–°–´–õ–ö–£",
                    callback_data="get_ref_link",
                )
            ]
        ]
    )
    await callback.message.answer(text, reply_markup=kb, parse_mode=ParseMode.MARKDOWN)
    await callback.answer()
    # Wait 15 seconds, then send the story bonus message
    await asyncio.sleep(15)
    story_text = (
        "üéâ *+50 –±–∞–ª–ª–æ–≤ –∑–∞ —Å—Ç–æ—Ä–∏—Å!* üéâ\n\n"
        "–¢—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å *–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã* –∏ —É—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞? –¢–æ–≥–¥–∞ –≤–æ—Ç —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:\n\n"
        "‚úÖ *–°–¥–µ–ª–∞–π —Å—Ç–æ—Ä–∏—Å* —Å —Ñ–æ—Ç–æ, –≥–¥–µ —Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ—à—å –ø—Ä–æ—Ü–µ—Å—Å –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ–ª–ª–µ–Ω–¥–∂–∞.\n\n"
        "‚úÖ –û—Ç–º–µ—Ç—å –Ω–∞—Å –≤ —Å—Ç–æ—Ä–∏—Å.\n\n"
        "‚úÖ *–û—Ç–ø—Ä–∞–≤—å —Å–∫—Ä–∏–Ω—à–æ—Ç* —ç—Ç–æ–π —Å—Ç–æ—Ä–∏—Å –≤ –±–æ—Ç–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å *+50 –±–∞–ª–ª–æ–≤* –Ω–∞ —Å–≤–æ–π —Å—á—ë—Ç!\n\n"
        "‚ùóÔ∏è *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*\n\n"
        "1. –°–¥–µ–ª–∞–π —Å—Ç–æ—Ä–∏—Å —Å —Ñ–æ—Ç–æ.\n"
        "2. –û—Ç–º–µ—Ç—å –Ω–∞—Å –≤ —Å—Ç–æ—Ä–∏—Å.\n"
        "3. –û—Ç–ø—Ä–∞–≤—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç–æ—Ä–∏—Å –≤ –±–æ—Ç–∞.\n"
        "4. –ü–æ–ª—É—á–∏ *50 –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤*.\n\n"
        "–ë–∞–ª–ª—ã –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ –ø—Ä–æ–¥–≤–∏–≥–∞—Ç—å—Å—è –ø–æ —á–µ–ª–ª–µ–Ω–¥–∂—É –∏ –ø–æ–ª—É—á–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–≤—ã–º —É—Ä–æ–∫–∞–º. –ù–µ —É–ø—É—Å—Ç–∏ —Å–≤–æ–π —à–∞–Ω—Å! üí•"
        "–ë–∞–ª–ª—ã –∑–∞ —Å—Ç–æ—Ä–∏—Å –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑, –ø–æ—ç—Ç–æ–º—É –Ω–µ –∑–∞–±—É–¥—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç!\n\n"
    )
    await callback.message.answer(story_text, parse_mode=ParseMode.MARKDOWN)

    await callback.message.answer_photo(
        photo=FSInputFile("images/menu.jpg"),
        caption="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=user_menu.main_menu,
    )


@router.message(Command("balance"))
async def cmd_balance(message: types.Message):
    user_id = message.from_user.id
    user_data = db.get_user(user_id)
    points = user_data["points"] if user_data else 0
    premium = user_data["premium"] if user_data else 0
    challenge_progress = (
        user_data["challenge_progress"]
        if user_data and "challenge_progress" in user_data
        else 0
    )
    # Get referral count
    cur = db.conn.cursor()
    cur.execute("SELECT COUNT(*) FROM users WHERE invited_by = ?", (user_id,))
    referral_count = cur.fetchone()[0]
    remaining = 5 - referral_count
    # Calculate lesson-based points: each lesson gives 40 points
    lesson_point = challenge_progress * 40
    # Total possible lesson points
    max_lesson_points = len(lessons.LESSON_TEXTS) * 40
    text = (
        f"*üíº –û–±—â–∏–µ –±–∞–ª–ª—ã:* {points} –±–∞–ª–ª–æ–≤\n\n"
        f"*–ë–∞–ª–ª—ã –∑–∞ —É—Ä–æ–∫–∏:* {lesson_point} / {max_lesson_points}\n"
        f"*–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π:* {referral_count} / 5\n\n"
        f"–•–æ—á–µ—à—å –≤ AI-–∫–ª—É–± –±–µ—Å–ø–ª–∞—Ç–Ω–æ? –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å *{remaining}* —á–µ–ª–æ–≤–µ–∫.\n\n"
    )
    if premium:
        text += "–£ —Ç–µ–±—è –µ—Å—Ç—å –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø."
    else:
        text += "–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω."
    await message.answer(text, parse_mode=ParseMode.MARKDOWN)


@router.message(Command("shop"))
async def cmd_shop(message: types.Message):
    user_id = message.from_user.id
    user_data = db.get_user(user_id)
    points = user_data["points"] if user_data else 0

    # Compute the user's referral rank
    cur = db.conn.cursor()
    cur.execute(
        """
        SELECT u.user_id, COUNT(r.user_id) AS cnt
        FROM users u
        LEFT JOIN users r ON r.invited_by = u.user_id
        GROUP BY u.user_id
        ORDER BY cnt DESC
        """
    )
    all_rows = cur.fetchall()
    user_rank = None
    for idx, row in enumerate(all_rows, start=1):
        # row might be sqlite3.Row; extract user_id accordingly
        row_user_id = row["user_id"] if isinstance(row, (dict, sqlite3.Row)) else row[0]
        if row_user_id == user_id:
            user_rank = idx
            break

    # Build the shop description
    text = (
        "üéÅ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–∑—ã:*\n\n"
        "üé´ *–í—Ö–æ–¥ –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª –ü–∞–≤–ª–∞ –Ω–∞ 1 –º–µ—Å* ‚Äî 500 –±–∞–ª–ª–æ–≤\n"
        "üîí *–ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Å–∫–∏–¥–∫–∞ 10% –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É* ‚Äî 500 –±–∞–ª–ª–æ–≤\n"
        "üìû *–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –ü–∞–≤–ª–æ–º (1.5 —á)* ‚Äî 800 –±–∞–ª–ª–æ–≤\n\n"
        "ü•á *–¢–û–ü-1 –º–µ—Å—è—Ü–∞* ‚Äî –ë–µ—Å–ø–ª–∞—Ç–Ω–æ (–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ ‚Äú–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å‚Äù)\n"
        "ü•à *–¢–û–ü-2 –º–µ—Å—è—Ü–∞* ‚Äî –°–∫–∏–¥–∫–∞ 30%\n"
        "ü•â *–¢–û–ü-3 –º–µ—Å—è—Ü–∞* ‚Äî –°–∫–∏–¥–∫–∞ 30%\n\n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
    )

    # Explicitly build the inline keyboard using a list of buttons
    buttons = []

    # Prize 1: Premium access for 1 month (500 points)
    buttons.append(
        [
            InlineKeyboardButton(
                text="üé´ –ü–æ–ª—É—á–∏—Ç—å –≤—Ö–æ–¥ –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª –∑–∞ 500 –±–∞–ª–ª–æ–≤",
                callback_data="redeem_premium_points",
            )
        ]
    )

    # Prize 2: Permanent 10% discount (500 points)
    buttons.append(
        [
            InlineKeyboardButton(
                text="üîí –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é —Å–∫–∏–¥–∫—É 10% –∑–∞ 500 –±–∞–ª–ª–æ–≤",
                callback_data="redeem_discount_points",
            )
        ]
    )

    # Prize 3: Consultation with Pavel (800 points)
    buttons.append(
        [
            InlineKeyboardButton(
                text="üìû –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é (1.5 —á) –∑–∞ 800 –±–∞–ª–ª–æ–≤",
                callback_data="redeem_consultation_points",
            )
        ]
    )

    # TOP prizes: only include buttons for which the user is eligible, and only during the last 7 days of the month
    today = datetime.date.today()
    year, month = today.year, today.month
    last_day = calendar.monthrange(year, month)[1]
    # Show TOP buttons only if current day is within the last 7 days of the month
    if today.day >= last_day - 6:
        if user_rank == 1:
            buttons.append(
                [
                    InlineKeyboardButton(
                        text="ü•á –Ø ‚Äî –¢–û–ü-1 –º–µ—Å—è—Ü–∞ (–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ ‚Äú–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å‚Äù –±–µ—Å–ø–ª–∞—Ç–Ω–æ)",
                        callback_data="redeem_top1",
                    )
                ]
            )
        if user_rank == 2:
            buttons.append(
                [
                    InlineKeyboardButton(
                        text="ü•à –Ø ‚Äî –¢–û–ü-2 –º–µ—Å—è—Ü–∞ (–°–∫–∏–¥–∫–∞ 30% –Ω–∞ ‚Äú–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å‚Äù)",
                        callback_data="redeem_top2",
                    )
                ]
            )
        if user_rank == 3:
            buttons.append(
                [
                    InlineKeyboardButton(
                        text="ü•â –Ø ‚Äî –¢–û–ü-3 –º–µ—Å—è—Ü–∞ (–°–∫–∏–¥–∫–∞ 30% –Ω–∞ ‚Äú–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å‚Äù)",
                        callback_data="redeem_top3",
                    )
                ]
            )

    # Add "üí∏ –¢–∞—Ä–∏—Ñ—ã" button row
    buttons.append(
        [InlineKeyboardButton(text="üí∏ –¢–∞—Ä–∏—Ñ—ã", callback_data="show_tariffs")]
    )
    kb = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer(text, reply_markup=kb, parse_mode=ParseMode.MARKDOWN)


@router.message(Command("closed"))
async def cmd_closed(message: types.Message):
    promo_text = (
        "üî• *–ü–û–õ–£–ß–ò –î–û–°–¢–£–ü –í –ú–û–ô –ó–ê–ö–†–´–¢–´–ô –ö–ê–ù–ê–õ –ò –£–ó–ù–ê–ô, –ö–ê–ö –Ø –†–ê–ë–û–¢–ê–Æ –° GPT* üî•\n\n"
        "üí° –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å, –∫–∞–∫ —è –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –∏—Å–ø–æ–ª—å–∑—É—é GPT –∏ –¥—Ä—É–≥–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ ‚Äî *—Ç—ã –∑–¥–µ—Å—å –Ω–µ —Å–ª—É—á–∞–π–Ω–æ*.\n\n"
        "–í *–º–æ—ë–º –∑–∞–∫—Ä—ã—Ç–æ–º –∫–∞–Ω–∞–ª–µ* —è –ø–æ–∫–∞–∑—ã–≤–∞—é *–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Å—Ç–æ—Ä–æ–Ω—É —Ä–∞–±–æ—Ç—ã —Å AI*, –∞ –Ω–µ –≤–∏—Ç—Ä–∏–Ω—ã —Å —Ç–µ–æ—Ä–∏–µ–π –∏ —Å–∫—É—á–Ω—ã–º–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è–º–∏.\n\n"
        "---\n\n"
        "üì¶ *–ß–¢–û –¢–´ –ü–û–õ–£–ß–ò–®–¨:*\n\n"
        "1. *–ì–æ—Ç–æ–≤—ã–µ AI-—Å—Ü–µ–Ω–∞—Ä–∏–∏*: –ü–æ—à–∞–≥–æ–≤–æ –ø–æ–∫–∞–∑—ã–≤–∞—é, –∫–∞–∫ —è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É—é –ø—Ä–æ—Ü–µ—Å—Å—ã —Å GPT –∏ –¥—Ä—É–≥–∏–º–∏ AI-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏. –ü—Ä–æ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä—è–µ—à—å –∑–∞ –º–Ω–æ–π ‚Äî –∏ –ø–æ–ª—É—á–∞–µ—à—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n"
        "2. *–†–µ–∞–ª—å–Ω—ã–µ –∫–µ–π—Å—ã*: –ù–∏–∫–∞–∫–æ–π –≤–æ–¥—ã ‚Äî —Ç–æ–ª—å–∫–æ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã —Ç–æ–≥–æ, –∫–∞–∫ —è —Å—Ç—Ä–æ—é –≤–æ—Ä–æ–Ω–∫–∏, –≥–µ–Ω–µ—Ä–∏—Ä—É—é —Ç—Ä–∞—Ñ–∏–∫ –∏ —Å–æ–∑–¥–∞—é AI-—Ä–µ—à–µ–Ω–∏—è.\n"
        "3. *–ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Å–∞–π–¥–∞–º*: –†–∞–∑–±–∏—Ä–∞—é –≤—Å–µ —ç—Ç–∞–ø—ã –ø—Ä–æ—Ü–µ—Å—Å–∞: –æ—Ç –∏–¥–µ–∏ –¥–æ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏.\n"
        "4. *–¢–µ—Å—Ç—ã –∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏*: –Ø –∑–∞–ø—É—Å–∫–∞—é —Ñ–∏—à–∫–∏ –∏ –¥–µ–ª—é—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏, —á—Ç–æ–±—ã —Ç—ã –º–æ–≥ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ç–æ —Å—Ä–∞–∑—É.\n"
        "5. *–°–µ–∫—Ä–µ—Ç—ã*: –†–µ–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞.\n\n"
        "---\n\n"
        "‚ö° *–ß—Ç–æ –≤–∞–∂–Ω–æ?* –ó–¥–µ—Å—å –Ω–µ—Ç —Ç–µ–æ—Ä–∏–∏, —Ç–æ–ª—å–∫–æ *—Ä–∞–±–æ—Ç–∞—é—â–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏* –∏ *–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã*, –∫–æ—Ç–æ—Ä—ã–µ —è —Å–∞–º –∏—Å–ø–æ–ª—å–∑—É—é –∫–∞–∂–¥—ã–π –¥–µ–Ω—å. –¢—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–º–æ—Ç—Ä–∏—à—å, –∞ –≤–Ω–µ–¥—Ä—è–µ—à—å —ç—Ç–æ –≤ —Å–≤–æ–π –±–∏–∑–Ω–µ—Å.\n\n"
        "–ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤ –¥–µ–ª–∞—Ç—å, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–ª—É—à–∞—Ç—å, ‚Äî —Ç–µ–±–µ —Å—é–¥–∞.\n\n"
        "---\n\n"
        "üéØ *–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø?*\n\n"
        "1. üí≥ –û–ø–ª–∞—Ç–∞ ‚Äî 2500 ‚ÇΩ —á–µ—Ä–µ–∑ –±–æ—Ç.\n"
        "2. üéØ –ò–ª–∏ –Ω–∞–∫–æ–ø–∏ 500 –±–∞–ª–ª–æ–≤ –≤ *GPT-–ß–µ–ª–ª–µ–Ω–¥–∂–µ* –∏ –ø–æ–ª—É—á–∏ –¥–æ—Å—Ç—É–ø –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ —Ç—ã –ø–æ–ª—É—á–∏—à—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É —Å *–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –∫–µ–π—Å–∞–º–∏* –∏ *–∏–Ω—Å–∞–π–¥–∞–º–∏*.\n\n"
        "üí¨ *–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?* –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –≤—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤.\n\n"
        "üëâ*–•–æ—á–µ—à—å –ø–æ–ø–∞—Å—Ç—å?* –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É¬†`/–≤—Ö–æ–¥`¬†–≤ –±–æ—Ç–µ –∏ –∑–∞–±–µ—Ä–∏ —Å–≤–æ–π –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É, –≥–¥–µ —è –ø–æ–∫–∞–∑—ã–≤–∞—é —Ä–µ–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É —Å GPT.\n\n"
        "–ù–µ —É–ø—É—Å—Ç–∏ —Å–≤–æ–π —à–∞–Ω—Å ‚Äî –¥–µ–π—Å—Ç–≤—É–π —Å–µ–π—á–∞—Å! üî•"
    )
    # Send the closed-channel banner image
    await message.answer_photo(photo=FSInputFile("images/closed.jpg"))
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {config.PREMIUM_COST_RUB}‚ÇΩ",
                    callback_data="premium_pay",
                ),
                InlineKeyboardButton(
                    text=f"‚ö°Ô∏è {config.PREMIUM_COST_POINTS} –±–∞–ª–ª–æ–≤",
                    callback_data="premium_points",
                ),
            ],
            [
                InlineKeyboardButton(
                    text="üí∏ –¢–∞—Ä–∏—Ñ—ã",
                    callback_data="show_tariffs",
                ),
            ],
        ]
    )
    await message.answer(promo_text, reply_markup=kb, parse_mode=ParseMode.MARKDOWN)


@router.message(Command("entry"))
async def cmd_entry(message: types.Message):
    # Same as /closed
    await cmd_closed(message)


@router.message(Command("top"))
async def cmd_top(message: types.Message):
    # Get up to 10 users with their referral count (including zeros)
    cur = db.conn.cursor()
    cur.execute(
        """
        SELECT u.user_id, u.username, u.first_name,
               COUNT(r.user_id) AS cnt
        FROM users u
        LEFT JOIN users r ON r.invited_by = u.user_id
        GROUP BY u.user_id
        ORDER BY cnt DESC
        LIMIT 10
        """
    )
    rows = cur.fetchall()
    # Prepare rating text
    text_lines = ["üèÜ –†–µ–π—Ç–∏–Ω–≥ –∑–∞ –º–µ—Å—è—Ü:\n"]
    if not rows:
        text_lines.append("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    else:
        rank = 1
        for row in rows:
            # Depending on row type, extract fields
            user_id_val = (
                row["user_id"]
                if isinstance(row, dict) or hasattr(row, "keys")
                else row[0]
            )
            count = (
                row["cnt"] if isinstance(row, dict) or hasattr(row, "keys") else row[3]
            )
            # Get display name
            user_data = db.get_user(user_id_val)
            if user_data:
                name = (
                    f"@{user_data['username']}"
                    if user_data.get("username")
                    else (user_data.get("first_name") or str(user_id_val))
                )
            else:
                name = str(user_id_val)
            text_lines.append(f"{rank}. {name} ‚Äî {count} –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π")
            rank += 1
    text_lines.append("\nüîÅ –†–µ–π—Ç–∏–Ω–≥ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü. –¢–æ–ø-3 –ø–æ–ª—É—á–∞—é—Ç –ø—Ä–∏–∑—ã!")
    photo = FSInputFile("images/top.jpg")
    await message.answer_photo(photo=photo, caption="\n".join(text_lines))
    # await message.answer("\n".join(text_lines))


@router.message(Command("gift"))
async def cmd_gift(message: types.Message):
    user_data = db.get_user(message.from_user.id)
    cur = db.conn.cursor()
    cur.execute(
        "SELECT COUNT(*) FROM users WHERE invited_by = ?", (message.from_user.id,)
    )
    referral_count = cur.fetchone()[0]
    if referral_count < 1:
        await message.answer(
            "üéÅ –ü–æ–¥–∞—Ä–æ–∫ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –¥—Ä—É–≥–∞."
        )
    else:
        # Send the gift image before sending the PDF
        try:
            photo = FSInputFile("images/gift.jpg")
            await message.answer_photo(photo=photo)
        except Exception:
            pass
        # Send the gift PDF file
        try:
            doc = FSInputFile("gift.pdf")
            await message.answer_document(
                document=doc, caption="üéÅ –í–∞—à –ø–æ–¥–∞—Ä–æ–∫ - PDF —Ñ–∞–π–ª."
            )
        except Exception as e:
            await message.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )


@router.message(lambda m: m.text and m.text.lower() in ["–≤—Ö–æ–¥", "/–≤—Ö–æ–¥"])
async def cmd_access_closed(message: types.Message):
    user_id = message.from_user.id
    user_data = db.get_user(user_id)
    if user_data and user_data.get("premium"):
        # Check for existing one-time invite link
        invite_url = user_data.get("invite_link")
        if not invite_url:
            new_invite = await message.bot.create_chat_invite_link(
                chat_id=CLOSED_CHAT_URL, member_limit=1
            )
            invite_url = new_invite.invite_link
            db.set_invite_link(user_id, invite_url)
        await message.answer(f"–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç: {invite_url}")
    else:
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

        text = "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø–∞. –ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–µ–º–∏—É–º, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏."
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üí∏ –¢–∞—Ä–∏—Ñ—ã", callback_data="show_tariffs")]
            ]
        )
        await message.answer(text, reply_markup=kb)


@router.message(
    lambda m: m.text and m.text.lower() not in [w.lower() for w in lessons.CODE_WORDS]
)
async def handle_menu_text(message: types.Message):
    # Handle text input from the persistent menu keyboard
    text = message.text.lower()
    if text in ["–±–∞–ª–∞–Ω—Å", "/–±–∞–ª–∞–Ω—Å"]:
        return await cmd_balance(message)
    if text in ["–º–∞–≥–∞–∑–∏–Ω", "/–º–∞–≥–∞–∑–∏–Ω"]:
        return await cmd_shop(message)
    if text in ["–ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å", "/–ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å"]:
        return await referral.cmd_invite(message)
    if text in ["–¥—Ä—É–∑—å—è", "/–¥—Ä—É–∑—å—è"]:
        return await referral.cmd_friends(message)
    if text in ["–ø–æ–¥–∞—Ä–æ–∫", "/–ø–æ–¥–∞—Ä–æ–∫"]:
        return await cmd_gift(message)
    if text in ["—Ç–æ–ø", "/—Ç–æ–ø"]:
        return await cmd_top(message)
    if text in ["–∑–∞–∫—Ä—ã—Ç—ã–π", "/–∑–∞–∫—Ä—ã—Ç—ã–π"]:
        return await cmd_closed(message)
    if text in ["—Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ", "/—Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ"]:
        from aiogram.types import FSInputFile

        photo = FSInputFile("images/partner.jpg")
        await message.answer_photo(photo=photo)
        await message.answer(
            "üî• –•–æ—Ç–∏—Ç–µ –ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–æ?\n\n"
            "‚Äì –£ –≤–∞—Å –ø—Ä–æ–¥—É–∫—Ç, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å AI / –æ–±—É—á–µ–Ω–∏–µ–º?\n"
            "‚Äì –í—ã –≤–µ–¥—ë—Ç–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –∏–ª–∏ –∫–∞–Ω–∞–ª?\n"
            "‚Äì –ò–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤ –±–æ—Ç–∞?\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ: +7 912 201 3059 WA"
        )
        return
    if text in ["–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "/–ø–æ–¥–¥–µ—Ä–∂–∫–∞"]:
        await message.answer("–î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–∏—à–∏—Ç–µ —Å—é–¥–∞: https://t.me/PavelDumbrao")
        return
    # Unknown text - ignore silently
    return


# --- Tariffs and Payment Handlers ---


# Show tariff table
@router.callback_query(lambda c: c.data == "show_tariffs")
async def callback_show_tariffs(callback: types.CallbackQuery):
    tariff_text = (
        "*–¢–∞—Ä–∏—Ñ—ã –Ω–∞ –¥–æ—Å—Ç—É–ø –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª:*\n\n"
        "‚Ä¢ 1 –º–µ—Å—è—Ü ‚Äî 2‚ÄØ490 ‚ÇΩ\n"
        "‚Ä¢ 2 –º–µ—Å—è—Ü–∞ ‚Äî 3‚ÄØ980 ‚ÇΩ\n"
        "‚Ä¢ 3 –º–µ—Å—è—Ü–∞ ‚Äî 5‚ÄØ470 ‚ÇΩ\n"
        "‚Ä¢ 12 –º–µ—Å—è—Ü–µ–≤ ‚Äî 14‚ÄØ940 ‚ÇΩ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –æ–ø–ª–∞—Ç—ã:"
    )
    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="1 –º–µ—Å ‚Äì 2‚ÄØ490 ‚ÇΩ", callback_data="tariff_1")],
            [InlineKeyboardButton(text="2 –º–µ—Å ‚Äì 3‚ÄØ980 ‚ÇΩ", callback_data="tariff_2")],
            [InlineKeyboardButton(text="3 –º–µ—Å ‚Äì 5‚ÄØ470 ‚ÇΩ", callback_data="tariff_3")],
            [InlineKeyboardButton(text="12 –º–µ—Å ‚Äì 14‚ÄØ940 ‚ÇΩ", callback_data="tariff_12")],
        ]
    )
    await callback.message.answer(
        tariff_text, reply_markup=kb, parse_mode=ParseMode.MARKDOWN
    )
    await callback.answer()


# Payment URLs for each tariff
TARIFFS = {
    "tariff_1": 2490,
    "tariff_2": 3980,
    "tariff_3": 5470,
    "tariff_12": 14940,
}


# Generic handler for any tariff callback


@router.callback_query(lambda c: c.data.startswith("tariff_"))
async def handle_tariff(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    tariff_key = callback.data  # e.g., "tariff_1"
    amount = TARIFFS.get(tariff_key)
    if not amount:
        await callback.answer("–í—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ.", show_alert=True)
        return
    # Create and store payment label
    label = generate_payment_label(user_id)
    db.add_payment(label, user_id, amount)
    url = await create_payment_url(amount, label)
    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text=f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {amount:,}".replace(",", "‚ÄØ") + " ‚ÇΩ",
                    url=url,
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="üéü –£ –º–µ–Ω—è –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥",
                    callback_data=f"promo_{tariff_key}",
                )
            ],
        ]
    )
    await callback.message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ:",
        reply_markup=kb,
    )
    await callback.answer()


# Handler for promo-code on tariffs
@router.callback_query(lambda c: c.data.startswith("promo_"))
async def handle_tariff_promo(callback: types.CallbackQuery):
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

    user_id = callback.from_user.id
    # Extract tariff_key from callback.data (format: 'promo_tariff_1' etc.)
    tariff_key = callback.data.split("promo_")[1]
    promo_context[user_id] = tariff_key

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="show_tariffs")]
        ]
    )
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥.", reply_markup=kb)
    await callback.answer()


# --- Handlers for TOP prize redemption ---


@router.callback_query(lambda c: c.data == "redeem_top1")
async def redeem_top1_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    # Recompute user rank
    cur = db.conn.cursor()
    cur.execute(
        """
        SELECT u.user_id, COUNT(r.user_id) AS cnt
        FROM users u
        LEFT JOIN users r ON r.invited_by = u.user_id
        GROUP BY u.user_id
        ORDER BY cnt DESC
        """
    )
    all_rows = cur.fetchall()
    user_rank = None
    for idx, row in enumerate(all_rows, start=1):
        row_user_id = row["user_id"] if isinstance(row, (dict, sqlite3.Row)) else row[0]
        if row_user_id == user_id:
            user_rank = idx
            break

    if user_rank == 1:
        # Grant the free "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å" and send closed chat link
        await callback.message.answer(
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã ‚Äî –¢–û–ü-1 —ç—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞! –í–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª.\n\n"
            f"–í–æ—Ç —Å—Å—ã–ª–∫–∞: {config.CLOSED_CHAT_URL}"
        )
        db.set_premium(user_id, True)
    else:
        await callback.answer(
            "‚ö†Ô∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç—Ç–æ–≥–æ –ø—Ä–∏–∑–∞ –Ω—É–∂–Ω–æ –±—ã—Ç—å –¢–û–ü-1.", show_alert=True
        )

    await callback.answer()


@router.callback_query(lambda c: c.data == "redeem_top2")
async def redeem_top2_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    # Recompute user rank
    cur = db.conn.cursor()
    cur.execute(
        """
        SELECT u.user_id, COUNT(r.user_id) AS cnt
        FROM users u
        LEFT JOIN users r ON r.invited_by = u.user_id
        GROUP BY u.user_id
        ORDER BY cnt DESC
        """
    )
    all_rows = cur.fetchall()
    user_rank = None
    for idx, row in enumerate(all_rows, start=1):
        row_user_id = row["user_id"] if isinstance(row, (dict, sqlite3.Row)) else row[0]
        if row_user_id == user_id:
            user_rank = idx
            break

    if user_rank == 2:
        # 30% discount for 1 month (2490 -> 1743)
        discount_percent = 30
        base_amount = 2490
        discounted_amount = int(base_amount * (100 - discount_percent) / 100)
        label = generate_payment_label(user_id)
        db.add_payment(label, user_id, discounted_amount)
        url = await create_payment_url(discounted_amount, label)
        kb = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text=f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —Å–æ —Å–∫–∏–¥–∫–æ–π {discounted_amount} ‚ÇΩ",
                        url=url,
                    )
                ]
            ]
        )
        await callback.message.answer(
            f"ü•à –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã ‚Äî –¢–û–ü-2 —ç—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞ –∏ –ø–æ–ª—É—á–∏–ª–∏ —Å–∫–∏–¥–∫—É 30% –Ω–∞ ¬´–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å¬ª (1 –º–µ—Å—è—Ü).\n\n"
            f"–î–ª—è –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø–∞ –ø–æ —Å–Ω–∏–∂–µ–Ω–Ω–æ–π —Ü–µ–Ω–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=kb,
        )
        db.set_premium(user_id, 2)
    else:
        await callback.answer(
            "‚ö†Ô∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç—Ç–æ–≥–æ –ø—Ä–∏–∑–∞ –Ω—É–∂–Ω–æ –±—ã—Ç—å –¢–û–ü-2.", show_alert=True
        )
    await callback.answer()


@router.callback_query(lambda c: c.data == "redeem_top3")
async def redeem_top3_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    # Recompute user rank
    cur = db.conn.cursor()
    cur.execute(
        """
        SELECT u.user_id, COUNT(r.user_id) AS cnt
        FROM users u
        LEFT JOIN users r ON r.invited_by = u.user_id
        GROUP BY u.user_id
        ORDER BY cnt DESC
        """
    )
    all_rows = cur.fetchall()
    user_rank = None
    for idx, row in enumerate(all_rows, start=1):
        row_user_id = row["user_id"] if isinstance(row, (dict, sqlite3.Row)) else row[0]
        if row_user_id == user_id:
            user_rank = idx
            break

    if user_rank == 3:
        # 30% discount for 1 month (2490 -> 1743)
        discount_percent = 30
        base_amount = 2490
        discounted_amount = int(base_amount * (100 - discount_percent) / 100)
        label = generate_payment_label(user_id)
        db.add_payment(label, user_id, discounted_amount)
        url = await create_payment_url(discounted_amount, label)
        kb = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text=f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —Å–æ —Å–∫–∏–¥–∫–æ–π {discounted_amount} ‚ÇΩ",
                        url=url,
                    )
                ]
            ]
        )
        await callback.message.answer(
            f"ü•â –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã ‚Äî –¢–û–ü-3 —ç—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞ –∏ –ø–æ–ª—É—á–∏–ª–∏ —Å–∫–∏–¥–∫—É 30% –Ω–∞ ¬´–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å¬ª (1 –º–µ—Å—è—Ü).\n\n"
            f"–î–ª—è –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø–∞ –ø–æ —Å–Ω–∏–∂–µ–Ω–Ω–æ–π —Ü–µ–Ω–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=kb,
        )
        db.set_premium(user_id, 3)
    else:
        await callback.answer(
            "‚ö†Ô∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç—Ç–æ–≥–æ –ø—Ä–∏–∑–∞ –Ω—É–∂–Ω–æ –±—ã—Ç—å –¢–û–ü-3.", show_alert=True
        )
    await callback.answer()


# --- Handlers for shop point redemptions ---


@router.callback_query(lambda c: c.data == "redeem_premium_points")
async def redeem_premium_points_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_data = db.get_user(user_id)
    if user_data and user_data.get("points", 0) >= 500:
        db.update_points(user_id, -500)
        db.set_premium(user_id, True)
        await callback.message.answer(
            f"üé´ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª –Ω–∞ 1 –º–µ—Å—è—Ü.\n\n"
            f"–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞: @PavelDumbrao"
        )
    else:
        await callback.message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.")
    await callback.answer()


@router.callback_query(lambda c: c.data == "redeem_discount_points")
async def redeem_discount_points_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_data = db.get_user(user_id)
    if user_data and user_data.get("points", 0) >= 500:
        db.update_points(user_id, -500)
        # Mark in DB as having received a discount coupon (use premium=2)
        db.set_premium(user_id, 2)
        await callback.message.answer(
            "üîí –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é —Å–∫–∏–¥–∫—É 10% –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É.\n\n"
            "–í–∞—à –∫—É–ø–æ–Ω: GPTDISCOUNT\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –∫—É–ø–æ–Ω –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∏."
        )
    else:
        await callback.message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏.")
    await callback.answer()


@router.callback_query(lambda c: c.data == "redeem_consultation_points")
async def redeem_consultation_points_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_data = db.get_user(user_id)
    if user_data and user_data.get("points", 0) >= 800:
        db.update_points(user_id, -800)
        await callback.message.answer(
            "üìû –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å –ü–∞–≤–ª–æ–º (1.5 —á).\n\n"
            "–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –Ω–∞–ø–∏—à–∏—Ç–µ –ü–∞–≤–ª—É –≤ Telegram: @PavelDumbrao –∏ —É–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —á–µ—Ä–µ–∑ –±–æ—Ç."
        )
    else:
        await callback.message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.")
    await callback.answer()
